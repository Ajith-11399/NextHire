import React, { useContext, useEffect, useState } from 'react';
import { AppContext } from '../context/AppContext';
import { RxCrossCircled } from 'react-icons/rx';
import { JobCategories, JobLocations } from '../assets/assets.js';
import Jobcard from './Jobcard.jsx';
import { IoIosArrowDropleft, IoIosArrowDropright } from 'react-icons/io';
import { GrLocation } from 'react-icons/gr';

const JobListing = () => {
    
    const { isSearched, searchFilter, setSearchFilter, jobs } = useContext(AppContext);
    
    const [ showFilter, setShoWFilter ] = useState(false);

    const [ currentPage, setCurrentPage ] = useState(1);

    const [ selectedCategories, setSelectedCategories ] = useState([]);
    const [ selectedLocations, setSelectedLocations ] = useState([]);

    const [ filteredJobs, setFilteredJobs ] = useState(jobs);

    const handleCategoryChange = (category)=> {
        setSelectedCategories(
            prev => prev.includes(category) ? prev.filter ( c => c !== category ) : [...prev, category]
        )
    }

    const handleLocationChange = (location)=> {
        setSelectedLocations(
            prev => prev.includes(location) ? prev.filter ( c => c !== location ) : [...prev, location]
        )
    }

    useEffect(()=> {
        
        const matchesCategory = job => selectedCategories.length === 0 || selectedCategories.includes(job.category);

        const matchesLocation = job => selectedLocations.length === 0 || selectedLocations.includes(job.location);

        const matchesTitle = job => searchFilter.title === 0 || job.title.toLowerCase().includes(searchFilter.title.toLowerCase());

        const matchesSearchLocation = job => searchFilter.location === "" || job.location.toLowerCase().includes(searchFilter.location.toLowerCase())

        const newFilteredJobs = jobs.slice().reverse().filter(
            job => matchesCategory(job) && matchesLocation(job) && matchesTitle(job) && matchesSearchLocation(job)
        )

        setFilteredJobs(newFilteredJobs);
        setCurrentPage(1);

    }, [jobs, selectedCategories, selectedLocations, searchFilter])


    return (

        <div className='container 2xl:px-20 mx-auto flex flex-col lg:flex-row max-lg:space-y-8 py-8'>
            
            {/* Sidebar */}
            <div className='w-full lg:w-1/4 bg-white px-4'>
                
                {/* Search Filter from Hero Component */}
                {
                    isSearched && ( searchFilter.title !== "" || searchFilter.location !== "" ) && (
                        <>
                            <h3 className='font-medium text-lg mb-4'>Current Search</h3>
                            <div className='mb-4 text-gray-600'>
                                {searchFilter.title && (
                                    <span className='inline-flex items-center gap-2.5 bg-blue-50 border border-[#7320f0] px-4 py-1.5 rounded'>
                                        {searchFilter.title} 
                                        <RxCrossCircled onClick={ (e)=> setSearchFilter(prev => ({...prev, title:""})) } className='cursor-pointer' />
                                    </span>
                                )}
                                {searchFilter.location && (
                                    <span className='ml-2 inline-flex items-center gap-2.5 bg-red-50 border border-[#f05e20] px-4 py-1.5 rounded'>
                                        {searchFilter.location}
                                        <RxCrossCircled onClick={ (e)=> setSearchFilter(prev => ({...prev, location:""})) } className='cursor-pointer' />
                                    </span>
                                )}
                            </div>
                        </>
                    )
                }

                <button onClick={ (e)=> setShoWFilter(prev => !prev) } className='px-6 py-1.5 border border-gray-600 lg:hidden rounded'>
                    { showFilter ? "close" : "Filters" }
                </button>
                
                {/* Category Filter */}
                <div className={showFilter ? "" : "max-lg:hidden"}>
                    <h4 className='font-medium text-lg py-4'>Search By Categories</h4>
                    <ul className='space-y-4 text-gray-600'>
                        {
                            JobCategories.map((category, ind) => (
                                <li className='flex items-center gap-3' key={ind}>
                                    <input 
                                        className="scale-125 border border-[#7320f0] rounded checked:bg-[#7320f0]"
                                        type="checkbox"
                                        onChange={()=> handleCategoryChange(category)}
                                        checked={selectedCategories.includes(category)} />
                                    {category}
                                </li>
                            ))
                        }
                    </ul>
                </div>

                {/* Location Filter */}
                <div className={showFilter ? "" : "max-lg:hidden pt-14"}>
                    <h4 className='font-medium text-lg py-4'>Search By Locations</h4>
                    <ul className='space-y-4 text-gray-600'>
                        {
                            JobLocations.map((location, ind) => (
                                <li className='flex items-center gap-3' key={ind}>
                                    <input 
                                        className="scale-125 border border-[#7320f0] rounded checked:bg-[#7320f0]"
                                        type="checkbox"
                                        onChange={()=> handleLocationChange(location)}
                                        checked={selectedLocations.includes(location)} />
                                    {location}
                                </li>
                            ))
                        }
                    </ul>
                </div>

            </div>

            {/* Job Listings */}
            <section className='w-full lg:w-3/4 text-gray-800 max-lg:px-4'>
                <h3 className='font-medium text-3xl py-2' id='job-list'>Latest Jobs</h3>
                <p className='mb-8'>Get your desired job form top companies</p>
                <div className='grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4'>
                    {filteredJobs.slice((currentPage-1)*6, currentPage*6).map((ele, ind) => (
                        <Jobcard key={ind} job={ele} />
                    ))}
                </div>

                {/* Pagination */}
                {
                    filteredJobs.length > 0 && (
                        <div className='flex items-center justify-center space-x-2 mt-10'>
                            <a href="#job-list">
                                <IoIosArrowDropleft onClick={ ()=> setCurrentPage(Math.max(currentPage-1), 1) } />
                            </a>
                            {
                                Array.from({length:Math.ceil(filteredJobs.length/6)}).map((_, ind) => (
                                    <a key={ind} href="#job-list">
                                        <button onClick={ ()=> setCurrentPage(ind+1) } className={` w-10 h-10 flex items-center justify-center border border-gray-300 rounded ${currentPage === ind + 1 ? 'bg-blue-100 text-blue-500' : 'text-gray-500'}`}>
                                            {ind+1}
                                        </button>
                                    </a>
                                ))
                            }
                            <a href="#job-list">
                                <IoIosArrowDropright onClick={ ()=> setCurrentPage(Math.min(currentPage+1), Math.ceil(filteredJobs.length / 6)) } />
                            </a>
                        </div>
                    )
                }

            </section>

        </div>

    );

};

export default JobListing;